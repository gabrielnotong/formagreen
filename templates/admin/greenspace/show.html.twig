{% extends 'base.html.twig' %}

{% block stylesheets %}
    <style>
        #container {
            width: auto;
            height: 100vh;
            overflow: hidden;
            border: 2px solid #fff;
        }

        #tooltip {
            font-family: Helvetica, Arial, sans-serif;
            position: absolute;
            padding: 4px;
            margin: 8px;
            background: rgba(0, 0, 0, 0.8);
            color: #fff;
            max-width: 300px;
            font-size: 10px;
            z-index: 9;
            pointer-events: none;
        }
    </style>
{% endblock %}


{% block title %}Green spaces list{% endblock %}

{% block body %}
    <div id="container" class="container-fluid"></div>
    <div id="tooltip"></div>
{% endblock %}

{% block javascripts %}
    <script src="https://unpkg.com/deck.gl@latest/dist.min.js"></script>
    <!-- optional if mapbox base map is needed -->
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.53.0/mapbox-gl.js'></script>
    <script>
        const DECK_GL_KEY = 'pk.eyJ1IjoiZ25vdG9uZyIsImEiOiJjandrbmJxaTIwMGUzNDhwanZuNnh6cGgzIn0.XNWwQfuuyXoMzDqrW212bw';
        const THEME = 'mapbox://styles/mapbox/streets-v11';

        // todo: have to be generic
        let lat = {{ greenSpace.latitude }};
        let lng = {{ greenSpace.longitude }};
        let locationName = "{{ greenSpace.name ~ ', ' ~ greenSpace.address }}";
        let greenSpaces = [
            {
                position: [lng, lat],
                color: [0, 255, 255],
                name: locationName,
                exits: 4214,
                size: 5,
            },
        ]

        // todo: initial long/lat have to come from greenPaces coordinates
        // todo: first record
        const deckgl = new deck.DeckGL({
            container: 'container',
            mapboxApiAccessToken: DECK_GL_KEY,
            mapStyle: THEME,
            initialViewState: {
                longitude: lng,
                latitude: lat,
                zoom: 2
            },
            controller: true
        });

        const scatterplotLayer = new deck.ScatterplotLayer({
            data: greenSpaces,
            opacity: 0.3,
            getFillColor: d => d.color,
            radiusMinPixels: 11,
            pickable: true,
            onHover: info => setTooltip(info.x, info.y, info.object)
        })

        const ICON_MAPPING = {
            marker: {x: 0, y: 0, width: 128, height: 128, mask: true}
        };

        const iconLayer = new deck.IconLayer({
            id: 'icon-layer',
            data: greenSpaces,
            pickable: true,
            // iconAtlas and iconMapping are required
            // getIcon: return a string
            iconAtlas: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/icon-atlas.png',
            iconMapping: ICON_MAPPING,
            getIcon: d => 'marker',
            sizeScale: 10,
            getPosition: d => d.position,
            getSize: d => d.size,
            getColor: d => [Math.sqrt(d.exits), 140, 0]
        });

        deckgl.setProps({
            layers: [
                scatterplotLayer,
                iconLayer
            ]
        });

        function setTooltip(x, y, object) {
            const tooltip = document.getElementById('tooltip');
            if (object) {
                tooltip.style.display = 'block';
                tooltip.style.left = (x - 120) + 'px';
                tooltip.style.top = (y + 40) + 'px';
                tooltip.innerHTML = object.name;
            } else {
                tooltip.style.display = 'none';
            }
        }
    </script>
{% endblock %}
